// app/routes/dashboard/publish-campaign.$id.tsx
import { ActionFunctionArgs, redirect } from "@remix-run/node";
import { prisma } from "prisma-backend/app/lib/prisma";
import { getAuth } from "@clerk/remix/ssr.server";

type MetaResponse<T = any> = { id?: string; error?: any } & T;

async function createMetaCampaign(
  baseUrl: string,
  accessToken: string,
  name: string,
  specialAdCategories: string = "NONE" // default
): Promise<MetaResponse> {
  const res = await fetch(`${baseUrl}/campaigns`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      name,
      objective: "OUTCOME_TRAFFIC",
      status: "PAUSED",
      special_ad_categories: [specialAdCategories], // üî• obrigat√≥rio como array
    }),
  });

  const json = (await res.json()) as MetaResponse;
  if (!res.ok || !json.id) {
    console.error("‚ùå Failed to create campaign:", json);
    throw new Response("Meta Ads campaign creation failed", { status: 500 });
  }
  return json;
}

async function createMetaAdSet(
  baseUrl: string,
  accessToken: string,
  name: string,
  campaignId: string,
  budget: number
): Promise<MetaResponse> {
  const res = await fetch(`${baseUrl}/adsets`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      name: `${name} AdSet`,
      campaign_id: campaignId,
      billing_event: "IMPRESSIONS",
      optimization_goal: "REACH",
      daily_budget: String((budget ?? 20) * 100), // Meta espera em centavos
      start_time: new Date(Date.now() + 3600 * 1000).toISOString(), // +1h
      status: "PAUSED",
    }),
  });

  const json = (await res.json()) as MetaResponse;
  if (!res.ok || !json.id) {
    console.error("‚ùå Failed to create adset:", json);
    throw new Response("Meta Ads adset creation failed", { status: 500 });
  }
  return json;
}

async function createMetaCreative(
  baseUrl: string,
  accessToken: string,
  name: string,
  pageId: string,
  adDescription: string | null,
  image?: string | null
): Promise<MetaResponse> {
  const res = await fetch(`${baseUrl}/adcreatives`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      name: `${name} Creative`,
      object_story_spec: {
        page_id: pageId,
        link_data: {
          message: adDescription ?? "Generated by CampleteAI",
          link: "https://camplete.ai",
          ...(image ? { picture: image } : {}),
        },
      },
    }),
  });

  const json = (await res.json()) as MetaResponse;
  if (!res.ok || !json.id) {
    console.error("‚ùå Failed to create creative:", json);
    throw new Response("Meta Ads creative creation failed", { status: 500 });
  }
  return json;
}

async function createMetaAd(
  baseUrl: string,
  accessToken: string,
  name: string,
  adsetId: string,
  creativeId: string
): Promise<MetaResponse> {
  const res = await fetch(`${baseUrl}/ads`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      name: `${name} Ad`,
      adset_id: adsetId,
      creative: { creative_id: creativeId },
      status: "PAUSED",
    }),
  });

  const json = (await res.json()) as MetaResponse;
  if (!res.ok || !json.id) {
    console.error("‚ùå Failed to create ad:", json);
    throw new Response("Meta Ads ad creation failed", { status: 500 });
  }
  return json;
}

export async function action(args: ActionFunctionArgs) {
  const { userId } = await getAuth(args);
  if (!userId) throw new Response("Unauthorized", { status: 401 });

  const id = args.params.id!;

  const campaign = await prisma.campaign.findUnique({
    where: { id },
    include: {
      user: true,
      meta: true,
    },
  });

  if (!campaign) throw new Response("Not found", { status: 404 });

  // ------------------------------
  // 1. Publica no Meta Ads
  // ------------------------------
  if (
    campaign.user.metaAccessToken &&
    campaign.user.metaAdAccountId &&
    campaign.user.metaPageId
  ) {
    try {
      const baseUrl = `https://graph.facebook.com/v21.0/${campaign.user.metaAdAccountId}`;
      const token = campaign.user.metaAccessToken;

      const metaCampaign = await createMetaCampaign(
        baseUrl,
        token,
        campaign.name,
        campaign.meta?.specialAdCategories ?? "NONE"
      );

      const metaAdset = await createMetaAdSet(
        baseUrl,
        token,
        campaign.name,
        metaCampaign.id!,
        campaign.budget ?? 20
      );

      const metaCreative = await createMetaCreative(
        baseUrl,
        token,
        campaign.name,
        campaign.user.metaPageId,
        campaign.adDescription,
        campaign.image
      );

      const metaAd = await createMetaAd(
        baseUrl,
        token,
        campaign.name,
        metaAdset.id!,
        metaCreative.id!
      );

      await prisma.metaCampaign.upsert({
        where: { campaignId: campaign.id },
        update: {
          campaignId: campaign.id,
          campaignIdMeta: metaCampaign.id!,
          adSetId: metaAdset.id!,
          adId: metaAd.id!,
        },
        create: {
          campaignId: campaign.id,
          campaignIdMeta: metaCampaign.id!,
          adSetId: metaAdset.id!,
          adId: metaAd.id!,
        },
      });
      await prisma.campaign.update({
        where: { id: campaign.id },
        data: { status: "PUBLISHED" },
      });
    } catch (err) {
      console.error("‚ùå Meta Ads creation failed:", err);
      throw new Response("Meta Ads publish failed", { status: 500 });
    }
  } else {
    console.warn("‚ö†Ô∏è Usu√°rio n√£o tem credenciais Meta Ads salvas");
    throw new Response("Missing Meta Ads credentials", { status: 400 });
  }

  return redirect("/dashboard");
}
